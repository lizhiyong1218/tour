<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="
                    http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                    http://www.springframework.org/schema/tx 
                    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                    http://www.springframework.org/schema/aop 
                    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                    http://www.springframework.org/schema/context      
                    http://www.springframework.org/schema/context/spring-context-3.1.xsd
                    http://www.springframework.org/schema/cache 
                    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
                    http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- 注解支持 -->
	<context:annotation-config />
	
	<!-- #################################################################### -->
	<!-- # 开启织入切面 @Aspectj -->
	<!-- # proxy-target-class 为 true 使用CGLIB 动态代理织入增强 -->
	<!-- # proxy-target-class 为 false 使用JDK 动态代理织入增强【默认，如目标类没有声明接口 Spring 将自动使用CGLIB 动态代理】 -->
	<!-- # expose-proxy 为 true 暴露代理对象至 AopContext -->
	<!-- #################################################################### -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
	<context:component-scan base-package="com.lzy">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- #################################################################### -->
	<!-- # 装载属性占位符配置 -->
	<!-- #################################################################### -->
	<bean id="customProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean" p:ignoreResourceNotFound="true">
		<property name="locations">
			<!-- 禁止调整加载顺序(注：系统以list最后一个有效的value元素为准) -->
			<list>
				<value>classpath:/config.properties</value>
			</list>
		</property>
	</bean>
	<context:property-placeholder properties-ref="customProperties" />

	<!-- druid数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"   init-method="init" destroy-method="close">  
		<!-- 基本属性 url、user、password -->
        <property name="url" value="jdbc:mysql://${db.ip}:${db.port}/${db.name}?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull" />  
		<property name="username" value="root" />
		<property name="password" value="root" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" /> 
		<property name="maxActive" value="20" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		<!-- 打开removeAbandoned功能,1800秒，也就是30分钟,关闭abanded连接时输出错误日志
		一个连接被get后, 超过了 removeAbandonedTimeoutMillis这么久就强制关闭，要根据业务设置时间或者不设置
		<property name="removeAbandoned" value="true" /> 
    	<property name="removeAbandonedTimeout" value="1800" /> 
    	<property name="logAbandoned" value="true" /> 
		 -->
		
		<!-- 配置监控统计拦截的filters,拦截sql日志 -->
		<property name="filters" value="stat,log4j" /> 
        
    </bean>   
	
	<!-- 定义事务通知 -->
	 <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" /> 
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"	 rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED"    rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="edit*" propagation="REQUIRED"   rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="start*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="begin*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			
			<!-- 开启新事物 REQUIRES_NEW -->
			<tx:method name="genCreate*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes> 
	</tx:advice> 
	
	
	<!-- druid拦截器 -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<!-- <property name="patterns">
			<list>
				<value>com.lzy.tour.service.*</value>
				<value>com.lzy.tour.dao.*</value>
			</list>
		</property> -->
	</bean>
	
	<!-- 多个切面 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="druid-stat-pointcut" expression="execution(* com.lzy.tour.service..*.*(..))
		  OR execution(* com.lzy.tour.dao..*.*(..))" />
		<aop:pointcut id="interceptorPointCuts" expression="execution(* com.lzy.tour.service..*.*(..))" />
		
		<aop:advisor  pointcut-ref="druid-stat-pointcut" advice-ref="druid-stat-interceptor"/>
		<aop:advisor  pointcut-ref="interceptorPointCuts" advice-ref="txAdvice"/>
		
	</aop:config>
	
</beans>